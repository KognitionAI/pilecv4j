/*
 * pilecv4j_ffmpeg_utils.h
 *
 *  Created on: Jul 6, 2022
 *      Author: jim
 */

#ifndef _PILECV4J_FFMPEG_UTILS_H_
#define _PILECV4J_FFMPEG_UTILS_H_

extern "C" {
#include <libavformat/avformat.h>
}
#include <stdint.h>

#include <vector>
#include <map>
#include <tuple>
#include <chrono>
#include <string>

#include "utils/log.h"

#ifdef __GNUC__
#undef av_err2str
#define av_err2str(errnum) av_make_error_string((char*)__builtin_alloca(AV_ERROR_MAX_STRING_SIZE),AV_ERROR_MAX_STRING_SIZE, errnum)
#else
#undef av_err2str
#define av_err2str(errnum) av_make_error_string((char*)_alloca(AV_ERROR_MAX_STRING_SIZE),AV_ERROR_MAX_STRING_SIZE, errnum)
#endif

namespace pilecv4j
{
namespace ffmpeg
{

// =====================================================
/**
 * Status codes generated by this code. Orthogonal to AV_ERROR codes.
 */
enum Pcv4jStat {
  OK = 0,
  IN_USE = 1,
  BAD_STATE = 2,
  NO_STREAM = 3,
  NO_SUPPORTED_CODEC = 4,
  FAILED_CREATE_CODEC_CONTEXT = 5,
  FAILED_CREATE_FRAME = 6,
  FAILED_CREATE_PACKET = 7,
  UNSUPPORTED_CODEC = 8,
  NO_SOURCE_SET = 9,
  ALREADY_SET = 10,
  SOURCE_NULL = 11,
  NO_PROCESSOR_SET = 12,
  NO_IMAGE_MAKER_SET = 13,
  FAILED_CREATE_CODEC = 14,
  OPTION_ALREADY_SET = 15,
  STREAM_CHANGED = 16,
  STREAM_SELECT_FAILED = 17,
  NO_FORMAT = 18,
  NO_OUTPUT = 19,
  NO_PACKET_SOURCE_INFO = 20,
  NULL_PARAMETER = 21,
  FAILED_CREATE_MUXER = 22
};
#define MAX_PCV4J_CODE 22

// Make a full kognition return status from an libav status.
#define MAKE_AV_STAT(x) ((uint64_t)((int32_t)x) & 0xffffffff)
// Make a full kognition return status from an native-ffmpeg kognition status.
#define MAKE_P_STAT(x) ((((uint64_t)((int32_t)x) & 0xffffffff)) << 32);

const char* errMessage(uint64_t status);

inline bool isError(uint64_t stat) {
  // 0 is good and we expect this most of the time so check it first.
  if (stat == 0)
    return false;
  // if the MSBs are non zero then there's a PCV4J error
  if (stat & 0xffffffff00000000L)
    return true;
  // if the LSBs contain negative value then there's an AV error.
  //                   v
  if (stat & 0x0000000080000000L)
    return true;
  return false;
}

inline bool isAvError(uint64_t stat) {
  // 0 is good and we expect this most of the time so check it first.
  if (stat == 0)
    return false;
  // if the LSBs contain negative value then there's an AV error.
  //                   v
  if (stat & 0x0000000080000000L)
    return true;
  return false;
}

/**
 * equivalent of java's System.currentTimeMillis.
 */
inline int64_t now() {
  return static_cast<int64_t>(std::chrono::duration_cast< std::chrono::milliseconds >(
      std::chrono::system_clock::now().time_since_epoch()
  ).count());
}

std::string removeOption(const std::string& key, std::vector<std::tuple<std::string,std::string> >& options);
uint64_t buildOptions(const std::vector<std::tuple<std::string,std::string> >& options, AVDictionary** opts);
uint64_t buildOptions(const std::map<std::string,std::string>& options, AVDictionary** opts);
void rebuildOptions(const AVDictionary* opts, std::map<std::string,std::string>& result);
void rebuildOptions(const AVDictionary* opts, std::vector<std::tuple<std::string,std::string> >& result) ;
void logRemainingOptions(LogLevel logLevel, const char* component, const char* header,
                                       const std::vector<std::tuple<std::string,std::string> >& options);
void logRemainingOptions(LogLevel logLevel, const char* component, const char* header,
                                       const std::map<std::string,std::string>& options);
bool decoderExists(AVCodecID id);

extern AVRational millisecondTimeBase;

// =====================================================
}
}

#endif /* SRC_MAIN_CPP_PILECV4J_FFMPEG_UTILS_H_ */
